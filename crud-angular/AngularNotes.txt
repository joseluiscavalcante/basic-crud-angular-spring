https://angular.io/cli

 Uma aplicação angular pode ser pensada como um quebra-cabeça onde cada peça (ou cada módulo)
 é necessária para poder ver a imagem completa.

_____[Angular modularity]_____
- ng generate module <name> --routing

NgModules consolidam componentes, diretivas e canais em blocos coesos de funcionalidade,
cada um focado em uma área de recurso, domínio de negócios de aplicativo, fluxo de trabalho
ou coleção comum de utilitários.

Os módulos também podem adicionar serviços ao aplicativo. Esses serviços podem ser desenvolvidos
internamente, como algo que você mesmo desenvolveria ou vir de fontes externas, como o roteador
Angular e o cliente HTTP.

Os módulos podem ser carregados antecipadamente quando o aplicativo é iniciado ou carregados lentamente
de forma assíncrona pelo roteador.

_____[Rotas e Lazy Loading]_____

_____[Componentes]_____
- ng generate component <moduleName>/<name>

- Código necessário para renderizar as informações na tela
- Validações básicas

_____[Services]_____
- ng generate service <moduleName>/<servicesFile>/<ServiceName>

- Lógica da aplicação
- Manipulação de dados

_____[Injeção de dependências]_____
- Fornece uma instância automática para a classe

_____[Chamadas síncronas e assíncronas]_____

_____[APIs]_____

_____[End-Points]_____

_____[Observables - RXJS]_____

_____[Cross-Origin Resource Sharing (CORS)]_____
- CORS significa Cross-Origin Resource Sharing.
- É uma política de segurança nos navegadores web.
- Navegadores aplicam a Same-Origin Policy para evitar riscos de segurança.
- Impede solicitações de recursos entre origens diferentes.
- Em situações legítimas, é preciso permitir solicitações entre origens diferentes.
- O CORS permite que servidores indiquem quais origens têm permissão para acessar seus recursos.
- Servidores usam cabeçalhos HTTP, como "Access-Control-Allow-Origin", para especificar origens permitidas.
    - Exemplo: Access-Control-Allow-Origin: https://dominio-permitido.com
- O navegador verifica se a origem da solicitação está na lista de origens permitidas pelo servidor.
- Uso comum: Encontrado em solicitações AJAX e Fetch API ao fazer solicitações HTTP a partir de scripts em uma página web.
- Para desenvolvimento local: Criar proxy.conf.js -> Raiz do projeto

_____[Componentes Inteligentes - Smart Components - Containers]_____
- Responsabilidades: Os componentes inteligentes geralmente lidam com a lógica de negócios, a comunicação com serviços e a manipulação de dados.
- Comunicação: Eles podem interagir diretamente com serviços, disparar eventos e conter a lógica que coordena as ações dentro do aplicativo.
- Exemplo: Um componente que busca dados de um serviço, processa esses dados e os fornece para componentes de apresentação.

_____[Componentes de Apresentação - Dumb Components - Components]_____
- Responsabilidades: Esses componentes se concentram apenas na apresentação e na exibição de dados. Eles não possuem conhecimento da lógica de negócios.
- Comunicação: Os componentes de apresentação geralmente recebem dados por meio de propriedades de entrada (@Input) e emitem eventos para notificar sobre interações do usuário (@Output).
- Exemplo: Um componente que exibe uma lista de itens ou um formulário simples.

**Ao separar a lógica de apresentação da lógica de negócios, você cria uma arquitetura mais modular e fácil de entender. Isso facilita a manutenção, teste e reutilização de código.
**Essa abordagem se alinha com o princípio de Single Responsibility Principle (SRP), um dos princípios do SOLID, que sugere que uma classe (ou, neste caso, um componente) deve ter apenas uma razão para mudar.
